# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []	# create Hand object

    def __str__(self):
        cardhand = ""
        for card in self.cards:
            cardhand += str(card) + " "
        return "Hand contains: "+cardhand
            # return a string representation of a hand

    def add_card(self, card):
        self.cards.append(card)	# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        value = 0
        for card in self.cards:
            rank = card.get_rank()
            value += VALUES.get(rank)# compute the value of the hand, see Blackjack video
        for card in self.cards: 
            if rank == "A" and value<12:
                    value += 10
        return value
    def draw(self, canvas, pos):
        for card in self.cards:
            pos[0] = pos[0]+80
            card.draw(canvas, pos)# draw a hand on the canvas, use the draw method for cards
         

        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                new_card = Card(suit,rank)
                self.deck.append(new_card)        
                # create a Deck object
    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)   # use random.shuffle()

    def deal_card(self):
        return self.deck.pop()	# deal a card object from the deck
    
    def __str__(self):
        deck = ""
        for card in self.deck:
            deck += str(card) + " "
        return "Deck contains: "+ deck
        # return a string representing the deck



#define event handlers for buttons
def deal():
    global outcome, in_play, playerHand, dealerHand, deck
    in_play = True
    # your code goes he
    if in_play:
        playerHand = Hand()
        dealerHand = Hand()
        deck = Deck()
        deck.shuffle()
        playerHand.add_card(deck.deal_card())
        playerHand.add_card(deck.deal_card())
        dealerHand.add_card(deck.deal_card())
        dealerHand.add_card(deck.deal_card())
    #print "Dealers " + str(dealerHand)
    #print playerHand

    
def hit():
    global in_play, playerHand, deck, Hand, score
    # replace with your code below
    
    # if the hand is in play, hit the player
    if in_play and playerHand.get_value()<21:
        playerHand.add_card(deck.deal_card())
        print playerHand.get_value()
    if in_play and playerHand.get_value()>21:
        print "Uh Oh, player busted!"
        score -= 1
        in_play = False
        # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global in_play, dealerHand, playerHand, deck, Hand, score
    # replace with your code below
    if in_play:
        while dealerHand.get_value() < 17:
            dealerHand.add_card(deck.deal_card())
        if dealerHand.get_value() > 21:
            print "Uh Oh, the dealer busted!"
        if dealerHand.get_value() >= playerHand.get_value() and dealerHand.get_value() < 22:
            print "Dealer wins"
            
        else:
            print "Player wins"
            score +=1
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    global playerHand, dealerHand, score
    # test to make sure that card.draw works, replace with your code below
    Dpos = [70,200]
    Ppos = [70,300]
    #playerHand.draw(canvas,pos)
    dealerHand.draw(canvas,Dpos)
    playerHand.draw(canvas,Ppos)
    canvas.draw_text(str(score), [300,100], 50, 'Red')
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric